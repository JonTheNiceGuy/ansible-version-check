---
- name: Ansible Version Collection
  shell: "{{ ansible_env._ }} --version | grep ansible | cut -d\\{{ ' '}}{{ ' '}}-f2"
  register: my_ansible_version

- name: Ansible Version Collection Check
  assert:
    msg: "The version check didn't return a version number"
    that: 
      - "my_ansible_version.stdout is defined and my_ansible_version.stdout != ''"

- name: Ansible Version Processing
  set_fact:
    my_ansible_version_major: "{{ my_ansible_version.stdout | regex_replace('^(\\d+)(\\.\\d+\\.\\d+)$', '\\1') }}"
    my_ansible_version_minor: "{{ my_ansible_version.stdout | regex_replace('^(\\d+\\.)(\\d+)(\\.\\d+)$', '\\2') }}"
    my_ansible_version_point: "{{ my_ansible_version.stdout | regex_replace('^(\\d+\\.\\d+\\.)(\\d+)$', '\\2') }}"

- name: Enhance Debugging
  include_tasks: debug.yml
  when: my_ansible_version_debug|default('false')|string != 'false'

- name: Ansible Version Check
  assert:
    msg: "Requires Ansible {{ my_ansible_version_major_min|int }}.{{ my_ansible_version_minor_min|int }}.{{ my_ansible_version_point_min|int }} or later"
    that: (my_ansible_version_major|int == my_ansible_version_major_min|int and my_ansible_version_minor|int >= my_ansible_version_minor_min|int and my_ansible_version_point|int >= my_ansible_version_point_min) or (my_ansible_version_major|int == my_ansible_version_major_min|int and my_ansible_version_minor|int > my_ansible_version_minor_min) or (my_ansible_version_major|int > my_ansible_version_major_min)